Object subclass: #Cinta	instanceVariableNames: 'siguiente despacho enConflicto'	classVariableNames: ''	poolDictionaries: ''	category: 'tpPPR'!!Cinta commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	despacho:		<Object>	enConflicto:		<Object>	siguiente:		<Object>    Implementation Points!!Cinta methodsFor: 'accessing' stamp: 'Carlos 8/28/2019 10:26'!siguiente	^ siguiente! !!Cinta methodsFor: 'accessing' stamp: 'Carlos 8/28/2019 10:26'!enConflicto: anObject	enConflicto := anObject! !!Cinta methodsFor: 'accessing' stamp: 'Carlos 8/28/2019 10:26'!despacho: anObject	despacho := anObject! !!Cinta methodsFor: 'accessing' stamp: 'Carlos 8/28/2019 10:26'!despacho	^ despacho! !!Cinta methodsFor: 'accessing' stamp: 'Carlos 8/28/2019 10:26'!siguiente: anObject	siguiente := anObject! !!Cinta methodsFor: 'accessing' stamp: 'Carlos 8/28/2019 10:26'!enConflicto	^ enConflicto! !!Cinta methodsFor: 'initialization' stamp: 'CARLOS 8/30/2019 14:50'!initialize	super initialize.	despacho := nil.	enConflicto := False .	siguiente := nil.! !Cinta subclass: #CintaNormal	instanceVariableNames: 'longitud velocidad sectores'	classVariableNames: ''	poolDictionaries: ''	category: 'tpPPR'!!CintaNormal commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	longitud:		<Object>	sectores:		<Object>	velocidad:		<Object>    Implementation Points!!CintaNormal methodsFor: 'accessing' stamp: 'Carlos 8/28/2019 10:24'!velocidad: anObject	velocidad := anObject! !!CintaNormal methodsFor: 'accessing' stamp: 'Carlos 8/28/2019 10:24'!sectores	^ sectores! !!CintaNormal methodsFor: 'accessing' stamp: 'Carlos 8/28/2019 10:24'!longitud	^ longitud! !!CintaNormal methodsFor: 'accessing' stamp: 'Carlos 8/28/2019 10:24'!velocidad	^ velocidad! !!CintaNormal methodsFor: 'accessing' stamp: 'Carlos 8/28/2019 10:24'!sectores: anObject	sectores := anObject! !!CintaNormal methodsFor: 'accessing' stamp: 'Carlos 8/28/2019 10:24'!longitud: anObject	longitud := anObject! !!CintaNormal methodsFor: 'initialization' stamp: 'Carlos 8/28/2019 10:24'!initialize	super initialize.	longitud := nil.	sectores := nil.	velocidad := nil.! !Cinta subclass: #CintaReceptora	instanceVariableNames: 'nroPuesto'	classVariableNames: ''	poolDictionaries: ''	category: 'tpPPR'!!CintaReceptora commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	nroPuesto:		<Object>    Implementation Points!!CintaReceptora methodsFor: 'accessing' stamp: 'CARLOS 8/30/2019 14:51'!nroPuesto	^ nroPuesto! !!CintaReceptora methodsFor: 'accessing' stamp: 'CARLOS 8/30/2019 14:51'!nroPuesto: anObject	nroPuesto := anObject! !!CintaReceptora methodsFor: 'initialization' stamp: 'CARLOS 8/30/2019 14:51'!initialize	super initialize.	nroPuesto := 0.! !Object subclass: #Equipaje	instanceVariableNames: 'nroVuelo codPasajero prioritario peso segTransporte eventos'	classVariableNames: ''	poolDictionaries: ''	category: 'tpPPR'!!Equipaje commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	codPasajero:		<Object>	eventos:		<Object>	nroVuelo:		<Object>	peso:		<Object>	prioritario:		<Object>	segTransporte:		<Object>    Implementation Points!!Equipaje methodsFor: 'accessing' stamp: 'Carlos 8/28/2019 10:15'!peso: anObject	peso := anObject! !!Equipaje methodsFor: 'accessing' stamp: 'Carlos 8/28/2019 10:15'!codPasajero	^ codPasajero! !!Equipaje methodsFor: 'accessing' stamp: 'Carlos 8/28/2019 10:15'!segTransporte	^ segTransporte! !!Equipaje methodsFor: 'accessing' stamp: 'Carlos 8/28/2019 10:15'!nroVuelo	^ nroVuelo! !!Equipaje methodsFor: 'accessing' stamp: 'Carlos 8/28/2019 10:15'!prioritario	^ prioritario! !!Equipaje methodsFor: 'accessing' stamp: 'Carlos 8/28/2019 10:15'!peso	^ peso! !!Equipaje methodsFor: 'accessing' stamp: 'Carlos 8/28/2019 10:15'!eventos: anObject	eventos := anObject! !!Equipaje methodsFor: 'accessing' stamp: 'Carlos 8/28/2019 10:15'!eventos	^ eventos! !!Equipaje methodsFor: 'accessing' stamp: 'Carlos 8/28/2019 10:15'!codPasajero: anObject	codPasajero := anObject! !!Equipaje methodsFor: 'accessing' stamp: 'Carlos 8/28/2019 10:15'!segTransporte: anObject	segTransporte := anObject! !!Equipaje methodsFor: 'accessing' stamp: 'Carlos 8/28/2019 10:15'!prioritario: anObject	prioritario := anObject! !!Equipaje methodsFor: 'accessing' stamp: 'Carlos 8/28/2019 10:15'!nroVuelo: anObject	nroVuelo := anObject! !!Equipaje methodsFor: 'initialization' stamp: 'Carlos 8/28/2019 10:18'!initialize	super initialize.	codPasajero := ' '.	eventos := Bag new .	nroVuelo := Integer .	peso := Number.	prioritario := Boolean .	segTransporte := Integer .! !Object subclass: #Recepcion	instanceVariableNames: 'receptoras'	classVariableNames: ''	poolDictionaries: ''	category: 'tpPPR'!!Recepcion commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	receptoras:		<Object>    Implementation Points!!Recepcion methodsFor: 'initialization' stamp: 'CARLOS 8/30/2019 14:54'!initialize	super initialize.	"receptoras coleccion tipo ??? "	receptoras := Bag new initialize .! !!Recepcion methodsFor: 'accessing' stamp: 'Carlos 8/28/2019 10:27'!receptoras	^ receptoras! !!Recepcion methodsFor: 'accessing' stamp: 'Carlos 8/28/2019 10:27'!receptoras: anObject	receptoras := anObject! !Object subclass: #Selector	instanceVariableNames: 'siguiente'	classVariableNames: ''	poolDictionaries: ''	category: 'tpPPR'!!Selector commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	siguiente:		<Object>    Implementation Points!!Selector methodsFor: 'initialization' stamp: 'CARLOS 8/30/2019 14:55'!initialize	super initialize.	siguiente := nil.! !!Selector methodsFor: 'accessing' stamp: 'CARLOS 8/30/2019 14:55'!siguiente: anObject	siguiente := anObject! !!Selector methodsFor: 'accessing' stamp: 'CARLOS 8/30/2019 14:55'!siguiente	^ siguiente! !Selector subclass: #SelectorAleatorio	instanceVariableNames: 'cantidadSalteo'	classVariableNames: ''	poolDictionaries: ''	category: 'tpPPR'!!SelectorAleatorio commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	cantidadSalteo:		<Object>    Implementation Points!!SelectorAleatorio methodsFor: 'accessing' stamp: 'CARLOS 8/30/2019 14:56'!cantidadSalteo	^ cantidadSalteo! !!SelectorAleatorio methodsFor: 'accessing' stamp: 'CARLOS 8/30/2019 14:56'!cantidadSalteo: anObject	cantidadSalteo := anObject! !!SelectorAleatorio methodsFor: 'initialization' stamp: 'CARLOS 8/30/2019 14:58'!initialize	super initialize.	cantidadSalteo := 0.! !Selector subclass: #SelectorPeso	instanceVariableNames: 'peso'	classVariableNames: ''	poolDictionaries: ''	category: 'tpPPR'!!SelectorPeso methodsFor: 'accessing' stamp: 'CARLOS 8/30/2019 14:57'!peso	^ peso! !!SelectorPeso methodsFor: 'accessing' stamp: 'CARLOS 8/30/2019 14:57'!peso: anObject	peso := anObject! !!SelectorPeso methodsFor: 'initialization' stamp: 'CARLOS 8/30/2019 14:57'!initialize	super initialize.	peso := 0.! !Object subclass: #TerminalCarga	instanceVariableNames: 'coleccionDespachos'	classVariableNames: ''	poolDictionaries: ''	category: 'tpPPR'!!TerminalCarga commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	coleccionDespachos:		<Object>    Implementation Points!!TerminalCarga methodsFor: 'accessing' stamp: 'CARLOS 8/30/2019 14:54'!coleccionDespachos: anObject	coleccionDespachos := anObject! !!TerminalCarga methodsFor: 'accessing' stamp: 'CARLOS 8/30/2019 14:54'!coleccionDespachos	^ coleccionDespachos! !!TerminalCarga methodsFor: 'initialization' stamp: 'CARLOS 8/30/2019 14:54'!initialize	super initialize.	"Coleccion tipo ??"	coleccionDespachos := nil.! !