Object subclass: #FiguraGeometrica	instanceVariableNames: 'nombreFigura'	classVariableNames: ''	package: 'Polimorfismo'!!FiguraGeometrica commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	nombreFigura:		<Object>    Implementation Points!!FiguraGeometrica methodsFor: 'accessing' stamp: 'CLC 4/12/2020 14:07'!nombreFigura	^ nombreFigura! !!FiguraGeometrica methodsFor: 'accessing' stamp: 'CLC 4/12/2020 14:07'!nombreFigura: anObject	nombreFigura := anObject! !!FiguraGeometrica methodsFor: 'converting' stamp: 'CLC 4/15/2021 15:24'!asString	| aux |	aux:= ' Nombre figura es:', nombreFigura.	^aux. ! !!FiguraGeometrica methodsFor: 'as yet unclassified' stamp: 'CLC 4/15/2021 15:26'!calcularPerimetro 	 "No tiene implementaci√≥n"! !FiguraGeometrica subclass: #Circulo	instanceVariableNames: 'radio'	classVariableNames: ''	package: 'Polimorfismo'!!Circulo commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	radio:		<Object>    Implementation Points!!Circulo methodsFor: 'accessing' stamp: 'CLC 4/12/2020 14:15'!radio	^ radio! !!Circulo methodsFor: 'accessing' stamp: 'CLC 4/12/2020 14:15'!radio: anObject	radio := anObject! !!Circulo methodsFor: 'as yet unclassified' stamp: 'CLC 4/12/2020 14:19'!calcularPerimetro	| p |	p:= 2 * 3.14 * radio.	^p.! !!Circulo methodsFor: 'as yet unclassified' stamp: 'CLC 4/12/2020 14:16'!asString	"datos completo del circulo"	| aux |	aux:= super asString, ' Radio del circulo:', radio asString, String cr.	^aux.! !!Circulo methodsFor: 'initialization' stamp: 'CLC 4/12/2020 14:15'!initialize	super initialize.	radio := nil.! !FiguraGeometrica subclass: #Triangulo	instanceVariableNames: 'lado1 lado2 lado3'	classVariableNames: ''	package: 'Polimorfismo'!!Triangulo methodsFor: 'as yet unclassified' stamp: 'CLC 4/15/2021 15:35'!calcularPerimetro	| perimetro |	perimetro := lado1 + lado2 + lado3.	^perimetro. 	! !!Triangulo methodsFor: 'accessing' stamp: 'CLC 4/15/2021 15:30'!lado2: anObject	lado2 := anObject! !!Triangulo methodsFor: 'accessing' stamp: 'CLC 4/15/2021 15:30'!lado1	^ lado1! !!Triangulo methodsFor: 'accessing' stamp: 'CLC 4/15/2021 15:30'!lado3: anObject	lado3 := anObject! !!Triangulo methodsFor: 'accessing' stamp: 'CLC 4/15/2021 15:30'!lado3	^ lado3! !!Triangulo methodsFor: 'accessing' stamp: 'CLC 4/15/2021 15:30'!lado1: anObject	lado1 := anObject! !!Triangulo methodsFor: 'accessing' stamp: 'CLC 4/15/2021 15:30'!lado2	^ lado2! !!Triangulo methodsFor: 'initialization' stamp: 'CLC 4/15/2021 15:31'!initialize	super initialize.	lado1 :=0.	lado2 :=0.	lado3 :=0.! !!Triangulo methodsFor: 'converting' stamp: 'CLC 4/15/2021 15:34'!asString	| aux |	aux:= super asString, ' Lado1:', lado1 asString, ' Lado2:', lado2 asString, 'Lado3:', lado3 asString.	^aux.! !